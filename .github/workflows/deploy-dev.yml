name: ðŸš€ Deploy to Development

on:
  push:
    branches: [ development ]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Image tag (optional)'
        required: false
        default: 'latest'

jobs:
  deploy-dev:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    environment: development

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'

      - name: Generate Version Tag
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ github.event.inputs.tag }}" != "latest" ]; then
            echo "tag=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          else
            echo "tag=$(date +'%Y%m%d')-${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
          fi

      - name: Set Application Variables
        run: |
          RELEASE_NAME=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]' | tr '_' '-' | awk -F'/' '{print $2}')
          echo "ROUTE_HOST=${RELEASE_NAME}-dev.${{ secrets.APPS_DOMAIN }}" >> $GITHUB_ENV
          echo "APP_NAME=${RELEASE_NAME}" >> $GITHUB_ENV

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Install OpenShift CLI
        uses: redhat-actions/openshift-tools-installer@v1
        with:
          oc: latest

      - name: Login to OpenShift
        run: |
          oc login --token=${{ secrets.OSC_TOKEN }} --server=${{ secrets.OSC_SERVER }}
          oc project ${{ secrets.OSC_DEV_PROJECT }}

      - name: Build and Deploy
        env:
          GITHUB_ACTOR: ${{ github.actor }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OSC_DEV_PROJECT: ${{ secrets.OSC_DEV_PROJECT }}
        run: |
          chmod +x mvnw
          ./mvnw clean package -DskipTests \
            -Dquarkus.container-image.registry=ghcr.io \
            -Dquarkus.container-image.group=${{ github.repository_owner }} \
            -Dquarkus.container-image.name=${{ env.APP_NAME }} \
            -Dquarkus.container-image.tag=${{ steps.version.outputs.tag }} \
            -Dquarkus.openshift.route.host=${{ env.ROUTE_HOST }} \
            -Dquarkus.kubernetes-client.master-url=${{ secrets.OSC_SERVER }} \
            -Dquarkus.kubernetes-client.token=${{ secrets.OSC_TOKEN }}

      - name: Deploy to OpenShift
        env:
          OSC_DEV_PROJECT: ${{ secrets.OSC_DEV_PROJECT }}
        run: |
          ./mvnw quarkus:deploy \
            -Dquarkus.profile=dev \
            -Dquarkus.kubernetes-client.master-url=${{ secrets.OSC_SERVER }} \
            -Dquarkus.kubernetes-client.token=${{ secrets.OSC_TOKEN }}

      - name: Verify Deployment
        run: |
          oc rollout status deployment/${{ env.APP_NAME }} -n ${{ secrets.OSC_DEV_PROJECT }} --timeout=180s

      - name: Run E2E Tests
        run: |
          echo "TODO: Add E2E tests using your preferred testing framework"
          echo "These tests should run against the newly deployed dev environment"

      - name: Performance Tests
        run: |
          echo "TODO: Add basic k6 performance tests against dev environment"