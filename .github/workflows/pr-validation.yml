name: üß™ PR Validation

on:
  pull_request:
    branches: [ development, main ]
  workflow_dispatch: # Manual trigger

jobs:
  validate:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
      pull-requests: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set Repository Name
        id: repo_name
        run: |
          echo "name=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]' | tr '/' '-')" >> $GITHUB_OUTPUT

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'

      - name: Grant execute permission for mvnw
        run: chmod +x mvnw

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: java  # Change to 'java' since Kotlin is analyzed as Java
          queries: security-extended,security-and-quality  # Add more comprehensive queries

      - name: Build with Maven
        run: ./mvnw clean package -DskipTests

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "pr-validation"
          upload: true
          wait-for-processing: true

      - name: Testing
        run: |
          echo "TODO: Add tests"

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: SonarQube Scan and Quality Gate
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          ./mvnw sonar:sonar \
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} \
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.pullrequest.key=${{ github.event.pull_request.number }} \
            -Dsonar.pullrequest.branch=${{ github.head_ref }} \
            -Dsonar.pullrequest.base=${{ github.base_ref }}
          
          # Quality Gate Check
          # This step retrieves the quality gate status from SonarQube
          SONAR_CE_TASK_URL=$(curl -s \
          -u "${{ secrets.SONAR_TOKEN }}:" \
          "${{ secrets.SONAR_HOST_URL }}/api/ce/task?componentKey=${{ steps.org_name.outputs.name }}")
          
          # Extract the task ID
          TASK_ID=$(echo $SONAR_CE_TASK_URL | jq -r '.task.id')
          
          # Wait for task to complete and get analysis ID
          ANALYSIS_ID=$(curl -s \
          -u "${{ secrets.SONAR_TOKEN }}:" \
          "${{ secrets.SONAR_HOST_URL }}/api/ce/task?id=$TASK_ID" | \
          jq -r '.task.analysisId')
          
          # Check quality gate status
          QUALITY_GATE_STATUS=$(curl -s \
          -u "${{ secrets.SONAR_TOKEN }}:" \
          "${{ secrets.SONAR_HOST_URL }}/api/qualitygates/project_status?analysisId=$ANALYSIS_ID" | \
          jq -r '.projectStatus.status')
          
          echo "Quality Gate Status: $QUALITY_GATE_STATUS"
          
          # Fail the workflow if quality gate is not passed
          if [ "$QUALITY_GATE_STATUS" != "OK" ]; then
          echo "‚ùå Quality Gate Failed"
          exit 1
          fi

      - name: Security Scans
        run: |
          echo "TODO: Add security scans (e.g., OWASP Dependency Check)"

      - name: Prepare Artifact Directory
        run: |
          mkdir -p build/quarkus-app/
          cp -r target/quarkus-app/* build/quarkus-app/

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.repo_name.outputs.name }}-build
          path: target/quarkus-app/
          retention-days: 1