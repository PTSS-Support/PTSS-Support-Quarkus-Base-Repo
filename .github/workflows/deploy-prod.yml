name: üöÄ Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:  # Manual trigger
    inputs:
      tag:
        description: 'Image tag to deploy'
        required: true

jobs:
  deploy-prod:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    environment: production
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set Repository Name
        id: repo_name
        run: |
          echo "name=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: SonarQube Scan and Quality Gate
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          ./mvnw sonar:sonar \
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} \
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}
          
          # Quality Gate Check
          SONAR_CE_TASK_URL=$(curl -s \
          -u "${{ secrets.SONAR_TOKEN }}:" \
          "${{ secrets.SONAR_HOST_URL }}/api/ce/task?componentKey=${{ secrets.SONAR_PROJECT_KEY }}")
          
          TASK_ID=$(echo $SONAR_CE_TASK_URL | jq -r '.task.id')
          
          # Wait for task to complete and get analysis ID
          ANALYSIS_ID=$(curl -s \
          -u "${{ secrets.SONAR_TOKEN }}:" \
          "${{ secrets.SONAR_HOST_URL }}/api/ce/task?id=$TASK_ID" | \
          jq -r '.task.analysisId')
          
          # Check quality gate status
          QUALITY_GATE_STATUS=$(curl -s \
          -u "${{ secrets.SONAR_TOKEN }}:" \
          "${{ secrets.SONAR_HOST_URL }}/api/qualitygates/project_status?analysisId=$ANALYSIS_ID" | \
          jq -r '.projectStatus.status')
          
          echo "Quality Gate Status: $QUALITY_GATE_STATUS"
          
          if [ "$QUALITY_GATE_STATUS" != "OK" ]; then
            echo "‚ùå Quality Gate Failed"
            exit 1
          fi

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Get Image Tag
        id: get_tag
        run: |
          TAG=${{ github.event.inputs.tag }}
          if [ "${{ github.event_name }}" = "push" ]; then
            TAG=$(date +'%Y%m%d')-${GITHUB_SHA::7}
          fi
          echo "tag=${TAG}" >> $GITHUB_OUTPUT

      - name: Verify Image Exists
        run: |
          IMAGE="ghcr.io/${{ steps.repo_name.outputs.name }}:${{ steps.get_tag.outputs.tag }}"
          
          echo "üîç Verifying image: $IMAGE"
          
          # Try to inspect the image
          if ! docker pull $IMAGE >/dev/null 2>&1; then
            echo "‚ùå Error: Image $IMAGE not found in registry"
            echo "Please ensure the image was built and pushed successfully in the development pipeline"
            exit 1
          fi
          
          echo "‚úÖ Image verification successful"
      
      - name: Install OpenShift CLI
        run: |
          curl -LO https://mirror.openshift.com/pub/openshift-v4/clients/ocp/latest/openshift-client-linux.tar.gz
          tar -xvf openshift-client-linux.tar.gz -C /usr/local/bin
          chmod +x /usr/local/bin/oc
        
      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.12.0
        
      - name: Login to OpenShift
        run: |
          oc login --token=${{ secrets.OSC_TOKEN }} --server=${{ secrets.OSC_SERVER }}
      
      - name: Deploy to OpenShift Prod
        run: |
          # Create a valid helm release name and route host (lowercase)
          HELM_RELEASE_NAME=$(echo ${{ github.event.repository.name }} | tr '[:upper:]' '[:lower:]' | tr '_' '-')
          ROUTE_HOST="${HELM_RELEASE_NAME}.${{ secrets.APPS_DOMAIN }}"
          
          helm upgrade --install ${HELM_RELEASE_NAME} ./helm \
            --namespace ${{ secrets.OSC_PROD_PROJECT }} \
            --values ./helm/values.yaml \
            --values ./helm/values-prod.yaml \
            --set image.registry=ghcr.io \
            --set image.repository=${{ steps.repo_name.outputs.name }} \
            --set image.tag=${{ steps.get_tag.outputs.tag }} \
            --set route.host=${ROUTE_HOST}
            
      - name: Wait for Deployment
        run: |
          HELM_RELEASE_NAME=$(echo ${{ github.event.repository.name }} | tr '[:upper:]' '[:lower:]' | tr '_' '-')
          oc rollout status deployment/${HELM_RELEASE_NAME} -n ${{ secrets.OSC_PROD_PROJECT }} --timeout=300s

      - name: Verify Deployment
        run: |
          HELM_RELEASE_NAME=$(echo ${{ github.event.repository.name }} | tr '[:upper:]' '[:lower:]' | tr '_' '-')
          
          # Check if all pods are ready
          READY_PODS=$(oc get deployment ${HELM_RELEASE_NAME} -n ${{ secrets.OSC_PROD_PROJECT }} -o jsonpath='{.status.readyReplicas}')
          DESIRED_PODS=$(oc get deployment ${HELM_RELEASE_NAME} -n ${{ secrets.OSC_PROD_PROJECT }} -o jsonpath='{.spec.replicas}')
          
          if [ "$READY_PODS" != "$DESIRED_PODS" ]; then
            echo "‚ùå Deployment verification failed: $READY_PODS/$DESIRED_PODS pods ready"
            exit 1
          fi
          
          echo "‚úÖ Deployment verification successful: $READY_PODS/$DESIRED_PODS pods ready"