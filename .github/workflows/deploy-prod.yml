name: üöÄ Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:  # Manual trigger
    inputs:
      tag:
        description: 'Image tag to deploy'
        required: true

jobs:
  deploy-prod:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    environment: production
    steps:
      - uses: actions/checkout@v3

      - name: Set Repository Name
        id: repo_name
        run: |
          echo "name=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT
          echo "artifact_name=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]' | tr '/' '-')" >> $GITHUB_OUTPUT

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get Image Tag
        id: get_tag
        run: |
          TAG=${{ github.event.inputs.tag }}
          if [ "${{ github.event_name }}" = "push" ]; then
            TAG=$(date +'%Y%m%d')-${GITHUB_SHA::7}
          fi
          echo "tag=${TAG}" >> $GITHUB_OUTPUT

      - name: Verify Image Exists
        run: |
          IMAGE="ghcr.io/${{ steps.repo_name.outputs.name }}:${{ steps.get_tag.outputs.tag }}"
          
          echo "üîç Verifying image: $IMAGE"
          
          # Try to inspect the image
          if ! docker pull $IMAGE >/dev/null 2>&1; then
            echo "‚ùå Error: Image $IMAGE not found in registry"
            echo "Please ensure the image was built and pushed successfully in the development pipeline"
            exit 1
          fi
          
          echo "‚úÖ Image verification successful"

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'

      - name: Set Application Variables
        run: |
          RELEASE_NAME=$(echo ${{ github.event.repository.name }} | tr '[:upper:]' '[:lower:]' | tr '_' '-')
          echo "ROUTE_HOST=${RELEASE_NAME}.${{ secrets.APPS_DOMAIN }}" >> $GITHUB_ENV
          echo "APP_NAME=${RELEASE_NAME}" >> $GITHUB_ENV

      - name: Deploy to OpenShift
        run: |
          ./mvnw quarkus:deploy \
            -Dquarkus.kubernetes-client.master-url=${{ secrets.OSC_SERVER }} \
            -Dquarkus.kubernetes-client.token=${{ secrets.OSC_TOKEN }} \
            -Dquarkus.container-image.registry=ghcr.io \
            -Dquarkus.container-image.group=${{ github.repository }} \
            -Dquarkus.container-image.name=${{ env.APP_NAME }} \
            -Dquarkus.container-image.tag=${{ steps.get_tag.outputs.tag }} \
            -Dquarkus.openshift.route.host=${{ env.ROUTE_HOST }} \
            -Dquarkus.openshift.deployment.namespace=${{ secrets.OSC_PROD_PROJECT }} \
            -Dquarkus.openshift.env.configmaps=${{ env.APP_NAME }}-config \
            -Dquarkus.kubernetes.deploy-wait=true \
            -Dquarkus.container-image.build=false \
            -Dquarkus.kubernetes.deploy=true \
            -Dquarkus.profile=prod

      - name: Verify Deployment
        run: |
          # Check if deployment exists
          if ! oc get deployment ${APP_NAME} -n ${{ secrets.OSC_PROD_PROJECT }} &>/dev/null; then
            echo "‚ùå Deployment ${APP_NAME} not found"
            exit 1
          fi
          
          # Check if all pods are ready
          READY_PODS=$(oc get deployment ${APP_NAME} -n ${{ secrets.OSC_PROD_PROJECT }} -o jsonpath='{.status.readyReplicas}')
          DESIRED_PODS=$(oc get deployment ${APP_NAME} -n ${{ secrets.OSC_PROD_PROJECT }} -o jsonpath='{.spec.replicas}')
          
          if [ "$READY_PODS" != "$DESIRED_PODS" ]; then
            echo "‚ùå Deployment verification failed: $READY_PODS/$DESIRED_PODS pods ready"
            exit 1
          fi
          
          echo "‚úÖ Deployment verification successful: $READY_PODS/$DESIRED_PODS pods ready"